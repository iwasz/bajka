/****************************************************************************
 *                                                                          *
 *  Author : lukasz.iwaszkiewicz@gmail.com                                  *
 *  ~~~~~~~~                                                                *
 *  License : see COPYING file for details.                                 *
 *  ~~~~~~~~~                                                               *
 ****************************************************************************/

#include "Source.h"
#include <sound/SoundException.h>
#include <util/Exceptions.h>

/****************************************************************************/

struct Source::Impl {
};

/****************************************************************************/

Source::Source () : impl (new Impl)
{
}

/****************************************************************************/

Source::~Source ()
{
        stop ();
        delete impl;
}

/****************************************************************************/

void Source::play (std::string const &bufferName)
{
        assertThrow (device, "Source::play (s) device is NULL");
//        play (device->getBuffer (bufferName));
}

/****************************************************************************/

void Source::play ()
{
        play (buffer);
}

/****************************************************************************/

void Source::play (Buffer *buf)
{
        assertThrow (buffer, "Source::play () needs buffer to play. Set it using setBuffer method.");
}

/****************************************************************************/

void Source::pause ()
{
}

/****************************************************************************/

void Source::stop ()
{
}

/****************************************************************************/

void Source::rewind ()
{
}

/****************************************************************************/

float Source::getGain () const
{
}

/****************************************************************************/

void Source::setGain (float f)
{
}

/****************************************************************************/

float Source::getPitch () const
{
}

/****************************************************************************/

void Source::setPitch (float f)
{
}

/****************************************************************************/

float Source::getOffset () const
{
        return 0;
}

/****************************************************************************/

void Source::setOffset (float f)
{
}

/****************************************************************************/

Geometry::Point3 Source::getPosition () const
{
        Geometry::Point3 p = {0, 0, 0};
        return p;
}

/****************************************************************************/

void Source::setPosition (Geometry::Point3 &p)
{
}

/****************************************************************************/

Geometry::Point3 Source::getVelocity () const
{
        Geometry::Point3 p = {0, 0, 0};
        return p;
}

/****************************************************************************/

void Source::setVelocity (Geometry::Point3 &p)
{
}

/****************************************************************************/

Geometry::Point3 Source::getDirection () const
{
        Geometry::Point3 p = {0, 0, 0};
        return p;
}

/****************************************************************************/

void Source::setDirection (Geometry::Point3 &p)
{
}

/****************************************************************************/

bool Source::getLooping () const
{
        int i;
        return i;
}

/****************************************************************************/

void Source::setLooping (bool b)
{
}
